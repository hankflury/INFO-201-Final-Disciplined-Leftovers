nsmoke <- babies[babies$smoke == 0, ]
n.nsmoke <- nrow(nsmoke)
n.smoke
n.nsmoke
Dskew.smoke <- 1:B
for(i in 1:B) {
samp <- rnorm(n.smoke, mean = mean(smoke$bwt), sd = sd(smoke$bwt))
Dskew.smoke[i] <- (n.smoke-1) ** (-3/2) * sum((samp - mean(samp)) ** 3)
}
hist(Dskew.smoke, probability = TRUE)
abline(v = (n.smoke-1) ** (-3/2) * sum((samp - mean(smoke$bwt)) ** 3), col = "blue", lwd = 3)
Dskew.nsmoke <- 1:B
for(i in 1:B) {
samp <- rnorm(n.nsmoke, mean = mean(nsmoke$bwt), sd = sd(nsmoke$bwt))
Dskew.nsmoke[i] <- (n.smoke-1) ** (-3/2) * sum((samp - mean(samp)) ** 3)
}
hist(Dskew.nsmoke, probability = TRUE)
abline(v = (n.smoke-1) ** (-3/2) * sum((samp - mean(nsmoke$bwt)) ** 3), col = "blue", lwd = 3)
smoke <- babies[babies$smoke == 1, ]
n.smoke <- nrow(smoke)
nsmoke <- babies[babies$smoke == 0, ]
n.nsmoke <- nrow(nsmoke)
Dskew.smoke <- 1:B
for(i in 1:B) {
samp <- rnorm(n.smoke, mean = mean(smoke$bwt), sd = sd(smoke$bwt))
Dskew.smoke[i] <- (n.smoke-1) ** (-3/2) * sum((samp - mean(samp)) ** 3)
}
hist(Dskew.smoke, probability = TRUE)
abline(v = (n.smoke-1) ** (-3/2) * sum((samp - mean(smoke$bwt)) ** 3), col = "blue", lwd = 3)
Dskew.nsmoke <- 1:B
for(i in 1:B) {
samp <- rnorm(n.nsmoke, mean = mean(nsmoke$bwt), sd = sd(nsmoke$bwt))
Dskew.nsmoke[i] <- (n.smoke-1) ** (-3/2) * sum((samp - mean(samp)) ** 3)
}
hist(Dskew.nsmoke, probability = TRUE)
abline(v = (n.smoke-1) ** (-3/2) * sum((samp - mean(nsmoke$bwt)) ** 3), col = "blue", lwd = 3)
plot((smoke$bwt - mean(smoke$bwt)) / sd(nsmoke$bwt))
abline(h = 0)
plot((nsmoke$bwt - mean(nsmoke$bwt))/ sd(nsmoke$bwt))
abline(h = 0)
plot((smoke$bwt - mean(smoke$bwt)) / sd(nsmoke$bwt), main = "Standardized Residuals of Smokers",
ylab = "Standardized Residuals")
abline(h = 0)
plot((nsmoke$bwt - mean(nsmoke$bwt))/ sd(nsmoke$bwt), main = "Standardized Residuals of Non-Smokers",
ylab = "Standardized Residuals")
abline(h = 0)
qqnorm(smoke$bwt)
x<-seq(-4,4,.001)
lines(x=x, y=x)
qqnorm(smoke$bwt, main = "Normal Q-Q Plot for Smokers")
x<-seq(-4,4,.001)
lines(x=x, y=x)
qqnorm(smoke$bwt - mean(smoke$bwt)) / sd(nsmoke$bwt), main = "Normal Q-Q Plot for Smokers")
qqnorm((smoke$bwt - mean(smoke$bwt)) / sd(nsmoke$bwt), main = "Normal Q-Q Plot for Smokers")
x<-seq(-4,4,.001)
lines(x=x, y=x)
qqnorm((nsmoke$bwt - mean(nsmoke$bwt))/ sd(nsmoke$bwt), main = "Normal Q-Q Plot for Non-Smokers")
lines(x=x, y=x)
qqnorm((smoke$bwt - mean(smoke$bwt)) / sd(nsmoke$bwt), main = "Normal Q-Q Plot for Smokers")
x<-seq(-4,4,.001)
lines(x=x, y=x)
qqnorm((nsmoke$bwt - mean(nsmoke$bwt))/ sd(nsmoke$bwt), main = "Normal Q-Q Plot for Non-Smokers")
lines(x=x, y=x)
Dskew.smoke <- 1:B
for(i in 1:B) {
samp <- rnorm(n.smoke, mean = mean(smoke$bwt), sd = sd(smoke$bwt))
Dskew.smoke[i] <- (n.smoke-1) ** (-3/2) * sum((samp - mean(samp)) ** 3)
}
hist(Dskew.smoke, probability = TRUE)
abline(v = (n.smoke-1) ** (-3/2) * sum((samp - mean(smoke$bwt)) ** 3), col = "blue", lwd = 3)
length(Dskew.smoke[Dskew.smoke <= (n.smoke-1) ** (-3/2) * sum((samp - mean(smoke$bwt)) ** 3)])/n.smoke
length(Dskew.smoke[Dskew.smoke <= (n.smoke-1) ** (-3/2) * sum((samp - mean(smoke$bwt)) ** 3)])
length(Dskew.smoke[Dskew.smoke <= (n.smoke-1) ** (-3/2) * sum((samp - mean(smoke$bwt)) ** 3)])/B
length(Dskew.nsmoke[Dskew.nsmoke <= (n.nsmoke-1) ** (-3/2) * sum((samp - mean(nsmoke$bwt)) ** 3)])/B
length(Dskew.nsmoke[Dskew.nsmoke <= (n.nsmoke-1) ** (-3/2) * sum((samp - mean(nsmoke$bwt)) ** 3)])
hist(Dskew.nsmoke, probability = TRUE)
abline(v = (n.smoke-1) ** (-3/2) * sum((samp - mean(nsmoke$bwt)) ** 3), col = "blue", lwd = 3)
(n.smoke-1) ** (-3/2) * sum((samp - mean(nsmoke$bwt)) ** 3)
(n.nsmoke-1) ** (-3/2) * sum((samp - mean(nsmoke$bwt)) ** 3)
hist(Dskew.nsmoke, probability = TRUE)
abline(v = (n.nsmoke-1) ** (-3/2) * sum((samp - mean(nsmoke$bwt)) ** 3), col = "blue", lwd = 3)
plot((nsmoke$bwt - mean(nsmoke$bwt))/ sd(nsmoke$bwt), main = "Standardized Residuals of Non-Smokers",
ylab = "Standardized Residuals")
abline(h = 0)
qqnorm((nsmoke$bwt - mean(nsmoke$bwt))/ sd(nsmoke$bwt), main = "Normal Q-Q Plot for Non-Smokers")
lines(x=x, y=x)
for(i in 1:B) {
samp <- rnorm(n.nsmoke, mean = mean(nsmoke$bwt), sd = sd(nsmoke$bwt))
Dskew.nsmoke[i] <- (n.smoke-1) ** (-3/2) * sum((samp - mean(samp)) ** 3)
}
hist(Dskew.nsmoke, probability = TRUE)
abline(v = (n.nsmoke-1) ** (-3/2) * sum((samp - mean(nsmoke$bwt)) ** 3), col = "blue", lwd = 3)
length(Dskew.nsmoke[Dskew.nsmoke <= (n.nsmoke-1) ** (-3/2) * sum((samp - mean(nsmoke$bwt)) ** 3)])
Dskew.nsmoke <- 1:B
for(i in 1:B) {
samp <- rnorm(n.nsmoke, mean = mean(nsmoke$bwt), sd = sd(nsmoke$bwt))
Dskew.nsmoke[i] <- (n.smoke-1) ** (-3/2) * sum((samp - mean(samp)) ** 3)
}
hist(Dskew.nsmoke, probability = TRUE)
abline(v = (n.nsmoke-1) ** (-3/2) * sum((samp - mean(nsmoke$bwt)) ** 3), col = "blue", lwd = 3)
length(Dskew.nsmoke[Dskew.nsmoke <= (n.nsmoke-1) ** (-3/2) * sum((samp - mean(nsmoke$bwt)) ** 3)])/B
Dskew.smoke <- 1:B
for(i in 1:B) {
samp <- rnorm(n.smoke, mean = mean(smoke$bwt), sd = sd(smoke$bwt))
Dskew.smoke[i] <- (n.smoke-1) ** (-3/2) * sum((samp - mean(samp)) ** 3)
}
hist(Dskew.smoke, probability = TRUE)
abline(v = (n.smoke-1) ** (-3/2) * sum((samp - mean(smoke$bwt)) ** 3), col = "blue", lwd = 3)
length(Dskew.smoke[Dskew.smoke <= (n.smoke-1) ** (-3/2) * sum((samp - mean(smoke$bwt)) ** 3)])/B
Dskew.nsmoke <- 1:B
for(i in 1:B) {
samp <- rnorm(n.nsmoke, mean = mean(nsmoke$bwt), sd = sd(nsmoke$bwt))
Dskew.nsmoke[i] <- (n.smoke-1) ** (-3/2) * sum((samp - mean(samp)) ** 3)
}
hist(Dskew.nsmoke, probability = TRUE)
abline(v = (n.nsmoke-1) ** (-3/2) * sum((samp - mean(nsmoke$bwt)) ** 3), col = "blue", lwd = 3)
length(Dskew.nsmoke[Dskew.nsmoke <= (n.nsmoke-1) ** (-3/2) * sum((samp - mean(nsmoke$bwt)) ** 3)])/B
length(Dskew.nsmoke[abs(Dskew.nsmoke) <= abs((n.nsmoke-1) ** (-3/2) * sum((samp - mean(nsmoke$bwt)) ** 3))])/B
length(Dskew.smoke[abs(Dskew.smoke) <= abs((n.smoke-1) ** (-3/2) * sum((samp - mean(smoke$bwt)) ** 3))])/B
Dskew.smoke <- 1:B
for(i in 1:B) {
samp <- rnorm(n.smoke, mean = mean(smoke$bwt), sd = sd(smoke$bwt))
Dskew.smoke[i] <- (n.smoke-1) ** (-3/2) * sum((samp - mean(samp)) ** 3)
}
hist(Dskew.smoke, probability = TRUE)
abline(v = (n.smoke-1) ** (-3/2) * sum((samp - mean(smoke$bwt)) ** 3), col = "blue", lwd = 3)
shiny::runApp('C:/Users/Hank/Desktop/INFO 201/a8-app-hankflury/ufo_ui')
library(shiny)
View(data)
UFOCoords.csv <- read.csv("C:/Users/Hank/Desktop/INFO 201/a8-app-hankflury/data/UFOCoords.csv.bz2")
View(UFOCoords.csv)
ufo <- UFOCoords.csv
ufo$Date <- as.Date(ufo$Date, format = "%m/%d/%Y")
runApp('C:/Users/Hank/Desktop/INFO 201/a8-app-hankflury/ufo_ui')
ufo$Time <- as.Date(ufo$Time, format = "h:m:s")
runApp('C:/Users/Hank/Desktop/INFO 201/a8-app-hankflury/ufo_ui')
runApp('C:/Users/Hank/Desktop/INFO 201/a8-app-hankflury/ufo_ui')
runApp('C:/Users/Hank/Desktop/INFO 201/a8-app-hankflury/ufo_ui')
ufo$Time[2] < ufo$Time[1]
ufo$Time[2] < ufo$Time[1]
ufo$Time <- as.Date(ufo$Time, format = "h:m:s")
View(ufo)
ufo <- UFOCoords.csv
ufo$Date <- as.Date(ufo$Date, format = "%m/%d/%Y")
ufo$Time <- as.Date(ufo$Time, format = "h:m:s")
View(ufo)
ufo <- UFOCoords.csv
ufo$Date <- as.Date(ufo$Date, format = "%m/%d/%Y")
View(ufo)
ufo$Time <- as.Date(ufo$Time, format = "H:M:S")
View(ufo)
library(chron)
install.packages(chron)
install.packages("chron")
ufo$Time <- times(ufo$Time)
View(ufo)
library(chron)
library(chron)
ufo <- UFOCoords.csv
ufo$Date <- as.Date(ufo$Date, format = "%m/%d/%Y")
ufo$Time <- times(ufo$Time)
View(ufo)
ufo$Time[2] < ufo$Time[1]
runApp('C:/Users/Hank/Desktop/INFO 201/a8-app-hankflury/ufo_ui')
View(UFOCoords.csv)
ufo <- UFOCoords.csv
ufo$Date <- as.Date(ufo$Date, format = "%m/%d/%Y")
ufo$Time <- times(ufo$Time)
ufo$Time[ufo$AM.PM == "PM", ] <- ufo$Time + 12
ufo <- UFOCoords.csv
ufo$Date <- as.Date(ufo$Date, format = "%m/%d/%Y")
ufo$Time <- times(ufo$Time)
ufo$Time[ufo$AM.PM == "PM", ] <- ufo$Time + times("12:00:00")
View(ufo)
ufo$Time[1] + ufo$Time[2]
ufo$Time[1] + times("12:00:00")
ufo$Time[ufo$AM.PM == "PM"] <- ufo$Time + times("12:00:00")
ufo$Time[ufo$AM.PM == "PM"] <- ufo$Time[ufo$AM.PM == "PM"] + times("12:00:00")
View(ufo)
ufo <- UFOCoords.csv
ufo$Date <- as.Date(ufo$Date, format = "%m/%d/%Y")
ufo$Time <- times(ufo$Time)
ufo$Time[ufo$AM.PM == "PM"] <- ufo$Time[ufo$AM.PM == "PM"] + times("12:00:00")
View(ufo)
ufo <- UFOCoords.csv
ufo$Date <- as.Date(ufo$Date, format = "%m/%d/%Y")
ufo$Time <- times(ufo$Time)
View(Time)
View(ufo$Time)
ufo$Time<- ufo$Time + times("12:00:00") * (ufo$AM.PM == "PM")
View(ufo)
ufo <- UFOCoords.csv
ufo$Date <- as.Date(ufo$Date, format = "%m/%d/%Y")
ufo$Time <- times(ufo$Time)
View(ufo$Time)
ufo$Time<- ufo$Time + times("12:00:00") * (ufo$AM.PM == "PM")
View(ufo)
times("12:00:00")
times("12:00:00") + times("3:00:00")
shiny::runApp('C:/Users/Hank/Desktop/INFO 201/a8-app-hankflury/ufo_ui')
View(ufo)
ufo <- UFOCoords.csv
View(ufo)
ufo <- UFOCoords.csv
ufo$Date <- as.Date(ufo$Date, format = "%m/%d/%Y")
ufo$Time <- as.character(ufo$Time)
for(i in 1:nrow(ufo)){
if(length(ufo$Time[i]) == 7)
ufo$Time[i] <- paste0("0", ufo$Time[i])
if(ufo$AM.PM[i] == "PM"){
print(strtoi(substr(ufo$Time[i], 1, 2)))
#ufo$Time[i] <- paste0(as.character(as.integer(substr(ufo$Time[i], 1, 2)) + 12), substr(ufo$Time[i], 3, length(ufo$Time[i])))
}
}
ufo <- UFOCoords.csv
ufo$Date <- as.Date(ufo$Date, format = "%m/%d/%Y")
ufo$Time <- as.character(ufo$Time)
for(i in 1:nrow(ufo)){
if(length(ufo$Time[i]) == 7)
ufo$Time[i] <- paste0("0", ufo$Time[i])
}
View(ufo)
length(ufo$Time[i])
ufo <- UFOCoords.csv
ufo$Date <- as.Date(ufo$Date, format = "%m/%d/%Y")
ufo$Time <- as.character(ufo$Time)
for(i in 1:nrow(ufo)){
if(nchar(ufo$Time[i]) == 7)
ufo$Time[i] <- paste0("0", ufo$Time[i])
}
View(ufo)
ufo <- UFOCoords.csv
ufo$Date <- as.Date(ufo$Date, format = "%m/%d/%Y")
ufo$Time <- as.character(ufo$Time)
for(i in 1:nrow(ufo)){
if(nchar(ufo$Time[i]) == 7){
ufo$Time[i] <- paste0("0", ufo$Time[i])
}
if(ufo$AM.PM[i] == "PM"){
print(strtoi(substr(ufo$Time[i], 1, 2)))
#ufo$Time[i] <- paste0(as.character(as.integer(substr(ufo$Time[i], 1, 2)) + 12), substr(ufo$Time[i], 3, length(ufo$Time[i])))
}
}
ufo <- UFOCoords.csv
ufo$Date <- as.Date(ufo$Date, format = "%m/%d/%Y")
ufo$Time <- as.character(ufo$Time)
for(i in 1:nrow(ufo)){
if(nchar(ufo$Time[i]) == 7){
ufo$Time[i] <- paste0("0", ufo$Time[i])
}
if(is.na(ufo$Time[i])) {
print("oops")
}
if(ufo$AM.PM[i] == "PM"){
print(strtoi(substr(ufo$Time[i], 1, 2)))
#ufo$Time[i] <- paste0(as.character(as.integer(substr(ufo$Time[i], 1, 2)) + 12), substr(ufo$Time[i], 3, length(ufo$Time[i])))
}
}
ufo <- UFOCoords.csv
ufo$Date <- as.Date(ufo$Date, format = "%m/%d/%Y")
ufo$Time <- as.character(ufo$Time)
for(i in 1:nrow(ufo)){
if(nchar(ufo$Time[i]) == 7){
ufo$Time[i] <- paste0("0", ufo$Time[i])
}
if(is.na(ufo$Time[i])) {
print("oops")
}
}
View(ufo)
if(ufo$AM.PM[i] == "PM"){
print(as.integer(substr(ufo$Time[i], 1, 2)))
#ufo$Time[i] <- paste0(as.character(as.integer(substr(ufo$Time[i], 1, 2)) + 12), substr(ufo$Time[i], 3, length(ufo$Time[i])))
}
View(ufo)
as.integer("09")
ufo <- UFOCoords.csv
ufo$Date <- as.Date(ufo$Date, format = "%m/%d/%Y")
ufo$Time <- as.character(ufo$Time)
for(i in 1:nrow(ufo)){
if(nchar(ufo$Time[i]) == 7){
ufo$Time[i] <- paste0("0", ufo$Time[i])
}
if(is.na(ufo$Time[i])) {
print("oops")
}
if(ufo$AM.PM[i] == "PM"){
print(as.integer(substr(ufo$Time[i], 1, 2)))
#ufo$Time[i] <- paste0(as.character(as.integer(substr(ufo$Time[i], 1, 2)) + 12), substr(ufo$Time[i], 3, length(ufo$Time[i])))
}
}
ufo <- UFOCoords.csv
ufo$Date <- as.Date(ufo$Date, format = "%m/%d/%Y")
ufo$Time <- as.character(ufo$Time)
for(i in 1:nrow(ufo)){
if(nchar(ufo$Time[i]) == 7){
ufo$Time[i] <- paste0("0", ufo$Time[i])
}
if(is.na(ufo$Time[i])) {
print("oops")
}
if(ufo$AM.PM[i] == "PM"){
print(as.integer(substr(ufo$Time[i], 1, 2)))
ufo$Time[i] <- paste0(as.character(as.integer(substr(ufo$Time[i], 1, 2)) + 12), substr(ufo$Time[i], 3, length(ufo$Time[i])))
}
}
View(ufo)
ufo <- UFOCoords.csv
ufo$Date <- as.Date(ufo$Date, format = "%m/%d/%Y")
ufo$Time <- as.character(ufo$Time)
for(i in 1:nrow(ufo)){
if(nchar(ufo$Time[i]) == 7){
ufo$Time[i] <- paste0("0", ufo$Time[i])
}
if(is.na(ufo$Time[i])) {
print("oops")
}
if(ufo$AM.PM[i] == "PM"){
print(as.integer(substr(ufo$Time[i], 1, 2)))
print(substr(ufo$Time[i], 3, length(ufo$Time[i])))
ufo$Time[i] <- paste0(as.character(as.integer(substr(ufo$Time[i], 1, 2)) + 12), substr(ufo$Time[i], 3, length(ufo$Time[i])))
}
}
the <- the
the <- the
the <- "the"
substr(the, 1, 2)
the
ufo <- UFOCoords.csv
ufo$Date <- as.Date(ufo$Date, format = "%m/%d/%Y")
ufo$Time <- as.character(ufo$Time)
for(i in 1:nrow(ufo)){
if(nchar(ufo$Time[i]) == 7){
ufo$Time[i] <- paste0("0", ufo$Time[i])
}
if(is.na(ufo$Time[i])) {
print("oops")
}
if(ufo$AM.PM[i] == "PM"){
print(as.integer(substr(ufo$Time[i], 1, 2)))
print(substr(ufo$Time[i], 3, length(ufo$Time[i])))
ufo$Time[i] <- paste0(as.character(as.integer(substr(ufo$Time[i], 1, 2)) + 12), substr(ufo$Time[i], 3, nchar(ufo$Time[i])))
}
}
View(ufo)
runApp('C:/Users/Hank/Desktop/INFO 201/a8-app-hankflury/ufo_ui')
ufo <- UFOCoords.csv
ufo$Date <- as.Date(ufo$Date, format = "%m/%d/%Y")
ufo$Time <- as.character(ufo$Time)
for(i in 1:nrow(ufo)){ #this makes everthing in 24 hour time, not 12
if(nchar(ufo$Time[i]) == 7){
ufo$Time[i] <- paste0("0", ufo$Time[i])
}
if(is.na(ufo$Time[i])) {
print("oops")
}
if(ufo$AM.PM[i] == "PM"){
ufo$Time[i] <- paste0(as.character(as.integer(substr(ufo$Time[i], 1, 2)) + 12), substr(ufo$Time[i], 3, nchar(ufo$Time[i])))
}
}
ufo$Time <- times(ufo$Time)
View(ufo$Time)
ufo <- UFOCoords.csv
ufo[149, ]
ufo <- UFOCoords.csv
ufo$Date <- as.Date(ufo$Date, format = "%m/%d/%Y")
ufo$Time <- as.character(ufo$Time)
for(i in 1:nrow(ufo)){ #this makes everthing in 24 hour time, not 12
if(nchar(ufo$Time[i]) == 7){
ufo$Time[i] <- paste0("0", ufo$Time[i])
}
if(is.na(ufo$Time[i])) {
print("oops")
}
if(ufo$AM.PM[i] == "PM" & substr(ufo$Time[i], 1, 2) != "12"){
ufo$Time[i] <- paste0(as.character(as.integer(substr(ufo$Time[i], 1, 2)) + 12), substr(ufo$Time[i], 3, nchar(ufo$Time[i])))
}
}
ufo$Time <- times(ufo$Time)
runApp('C:/Users/Hank/Desktop/INFO 201/a8-app-hankflury/ufo_ui')
ufo <- UFOCoords.csv
ufo$Date <- as.Date(ufo$Date, format = "%m/%d/%Y")
ufo$Time <- as.character(ufo$Time)
for(i in 1:nrow(ufo)){ #this makes everthing in 24 hour time, not 12
if(nchar(ufo$Time[i]) == 7){
ufo$Time[i] <- paste0("0", ufo$Time[i])
}
if(is.na(ufo$Time[i])) {
print("oops")
}
if(ufo$AM.PM[i] == "PM" & substr(ufo$Time[i], 1, 2) != "12"){
ufo$Time[i] <- paste0(as.character(as.integer(substr(ufo$Time[i], 1, 2)) + 12), substr(ufo$Time[i], 3, nchar(ufo$Time[i])))
}
}
ufo$Time <- times(ufo$Time)
View(ufo)
View(ufo)
ufo <- UFOCoords.csv
ufo$Date <- as.Date(ufo$Date, format = "%m/%d/%Y")
ufo$Time <- as.character(ufo$Time)
for(i in 1:nrow(ufo)){ #this makes everthing in 24 hour time, not 12
if(nchar(ufo$Time[i]) == 7){
ufo$Time[i] <- paste0("0", ufo$Time[i])
}
if(is.na(ufo$Time[i])) {
print("oops")
}
if(ufo$AM.PM[i] == "PM" & substr(ufo$Time[i], 1, 2) != "12"){
ufo$Time[i] <- paste0(as.character(as.integer(substr(ufo$Time[i], 1, 2)) + 12), substr(ufo$Time[i], 3, nchar(ufo$Time[i])))
}
}
ufo$Time <- times(ufo$Time)
runApp('C:/Users/Hank/Desktop/INFO 201/a8-app-hankflury/ufo_ui')
runApp('C:/Users/Hank/Desktop/INFO 201/a8-app-hankflury/ufo_ui')
ufo <- UFOCoords.csv
ufo$Date <- as.Date(ufo$Date, format = "%m/%d/%Y")
ufo$Time <- as.character(ufo$Time)
for(i in 1:nrow(ufo)){ #this makes everthing in 24 hour time, not 12
if(nchar(ufo$Time[i]) == 7){
ufo$Time[i] <- paste0("0", ufo$Time[i])
}
if(is.na(ufo$Time[i])) {
print("oops")
}
if(ufo$AM.PM[i] == "PM" & substr(ufo$Time[i], 1, 2) != "12"){
ufo$Time[i] <- paste0(as.character(as.integer(substr(ufo$Time[i], 1, 2)) + 12), substr(ufo$Time[i], 3, nchar(ufo$Time[i])))
}
else if(ufo$AM.PM[i] == "AM" & substr(ufo$Time[i], 1, 2) == "12") {
ufo$Time[i] <- paste0("00", substr(ufo$Time[i], 3, nchar(ufo$Time[i])))
}
}
ufo$Time <- times(ufo$Time)
runApp('C:/Users/Hank/Desktop/INFO 201/a8-app-hankflury/ufo_ui')
runApp('C:/Users/Hank/Desktop/INFO 201/a8-app-hankflury/ufo_ui')
?axis()
runApp('C:/Users/Hank/Desktop/INFO 201/a8-app-hankflury/ufo_ui')
runApp('C:/Users/Hank/Desktop/INFO 201/a8-app-hankflury/ufo_ui')
runApp('C:/Users/Hank/Desktop/INFO 201/a8-app-hankflury/ufo_ui')
runApp('C:/Users/Hank/Desktop/INFO 201/a8-app-hankflury/ufo_ui')
?hist()
runApp('C:/Users/Hank/Desktop/INFO 201/a8-app-hankflury/ufo_ui')
runApp('C:/Users/Hank/Desktop/INFO 201/a8-app-hankflury/ufo_ui')
heroes <- read.delim("C:/Users/Hank/Downloads/heroes.csv")
View(heroes)
runApp('C:/Users/Hank/Desktop/INFO 201/a8-app-hankflury/ufo_ui')
runApp('C:/Users/Hank/Desktop/INFO 201/a8-app-hankflury/ufo_ui')
runApp('C:/Users/Hank/Desktop/INFO 201/a8-app-hankflury/ufo_ui')
runApp('C:/Users/Hank/Desktop/INFO 201/a8-app-hankflury/ufo_ui')
runApp('C:/Users/Hank/Desktop/INFO 201/a8-app-hankflury/ufo_ui')
?hist()
runApp('C:/Users/Hank/Desktop/INFO 201/a8-app-hankflury/ufo_ui')
runApp('C:/Users/Hank/Desktop/INFO 201/a8-app-hankflury/ufo_ui')
runApp('C:/Users/Hank/Desktop/INFO 201/a8-app-hankflury/ufo_ui')
runApp('C:/Users/Hank/Desktop/INFO 201/a8-app-hankflury/ufo_ui')
runApp('C:/Users/Hank/Desktop/INFO 201/a8-app-hankflury/ufo_ui')
runApp('C:/Users/Hank/Desktop/INFO 201/a8-app-hankflury/ufo_ui')
runApp('C:/Users/Hank/Desktop/INFO 201/a8-app-hankflury/ufo_ui')
runApp('C:/Users/Hank/Desktop/INFO 201/a8-app-hankflury/ufo_ui')
runApp('C:/Users/Hank/Desktop/INFO 201/a8-app-hankflury/ufo_ui')
runApp('C:/Users/Hank/Desktop/INFO 201/a8-app-hankflury/ufo_ui')
runApp('C:/Users/Hank/Desktop/INFO 201/a8-app-hankflury/ufo_ui')
runApp('C:/Users/Hank/Desktop/INFO 201/a8-app-hankflury/ufo_ui')
runApp('C:/Users/Hank/Desktop/INFO 201/a8-app-hankflury/ufo_ui')
runApp('C:/Users/Hank/Desktop/INFO 201/a8-app-hankflury/ufo_ui')
runApp('C:/Users/Hank/Desktop/INFO 201/a8-app-hankflury/ufo_ui')
runApp('C:/Users/Hank/Desktop/INFO 201/a8-app-hankflury/ufo_ui')
runApp('C:/Users/Hank/Desktop/INFO 201/a8-app-hankflury/ufo_ui')
shiny::runApp('C:/Users/Hank/Desktop/INFO 201/INFO-201-Final-Disciplined-Leftovers')
runApp('C:/Users/Hank/Desktop/INFO 201/INFO-201-Final-Disciplined-Leftovers/EarthquakeVisualizations')
runApp('C:/Users/Hank/Desktop/INFO 201/INFO-201-Final-Disciplined-Leftovers/EarthquakeVisualizations')
source("graph functions")
source("depthMagnitude")
source("depthMagnitude.R")
setwd("C:/Users/Hank/Desktop/INFO 201/INFO-201-Final-Disciplined-Leftovers")
source("graph functions")
source("depthMagnitude.R")
source("graph functions.R")
source("depthMagnitude.R")
source("graph functions.R")
source("graph functions.R")
source("graph functions.R")
source("depthMagnitude.R")
read.csv("pnw-cat-recent-processed.csv")
cat <- read.csv("pnw-cat-recent-processed.csv")
runApp('EarthquakeVisualizations')
source("graph functions.R")
source("depthMagnitude.R")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
cat$date <- as.Date(date)
cat$date <- as.Date(cat$date)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
library(shinythemes)
install.packages("shinythemes")
library(shinythemes)
runApp()
